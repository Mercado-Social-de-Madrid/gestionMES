# -*- coding: utf-8 -*-
from django.core.exceptions import ObjectDoesNotExist
from django.core.management.base import BaseCommand

from accounts.models import Consumer
from core.models import User
from payments.models import AccountAnnualFeeCharge, AnnualFeeCharges, PendingPayment, SepaPaymentsBatch, \
    SepaBatchResult, AutogeneratedAnnualFee, CONSUMERS
import datetime
from datetime import datetime


class Command(BaseCommand):
    help = 'Generate annual fee charges for Consumers'

    def add_arguments(self, parser):
        parser.add_argument('datetime_start', type=str, help='format %Y-%m-%d %H:%M')
        parser.add_argument('datetime_end', type=str, help='format %Y-%m-%d %H:%M')

    def handle(self, *args, **options):

        datetime_start_str = options.get("datetime_start")
        datetime_end_str = options.get("datetime_end")

        datetime_start = datetime.strptime(datetime_start_str, '%Y-%m-%d %H:%M')
        datetime_end = datetime.strptime(datetime_end_str, '%Y-%m-%d %H:%M')
        payments_date = PendingPayment.objects.filter(added__range=(datetime_start, datetime_end))

        count = len(payments_date)

        print(f'count: {count}')

        for index, payment in enumerate(payments_date):
            print(f'Deleting payment and charge: {index + 1} of {count}', end="\r")
            try:
                charge = AccountAnnualFeeCharge.objects.get(payment=payment)
                charge.delete()
            except ObjectDoesNotExist:
                print(f"\nCuota no encontrada: {payment.account.cif}")

            payment.delete()


